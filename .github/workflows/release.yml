name: Release

on:
    push:
        tags:
            - "v*"

env:
    CARGO_TERM_COLOR: always

jobs:
    test:
        name: Test Suite
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: recursive

            - name: Install Rust
              uses: dtolnay/rust-toolchain@stable
              with:
                  components: rustfmt, clippy

            - name: Cache cargo registry
              uses: actions/cache@v4
              with:
                  path: ~/.cargo/registry
                  key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

            - name: Cache cargo index
              uses: actions/cache@v4
              with:
                  path: ~/.cargo/git
                  key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

            - name: Cache cargo build
              uses: actions/cache@v4
              with:
                  path: target
                  key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

            - name: Check formatting
              run: cargo fmt --all -- --check

            - name: Run clippy
              run: cargo clippy --all-targets --all-features -- -D warnings

            - name: Build
              run: cargo build --verbose

            - name: Run tests
              run: cargo test --verbose

            - name: Run tests with all features
              run: cargo test --all-features --verbose

    build:
        name: Build Release Binaries
        needs: test
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                include:
                    - os: ubuntu-latest
                      target: x86_64-unknown-linux-gnu
                      artifact_name: submod
                      asset_name: submod-linux-x86_64
                    - os: ubuntu-latest
                      target: x86_64-unknown-linux-musl
                      artifact_name: submod
                      asset_name: submod-linux-x86_64-musl
                    - os: windows-latest
                      target: x86_64-pc-windows-msvc
                      artifact_name: submod.exe
                      asset_name: submod-windows-x86_64.exe
                    - os: macos-latest
                      target: x86_64-apple-darwin
                      artifact_name: submod
                      asset_name: submod-macos-x86_64
                    - os: macos-latest
                      target: aarch64-apple-darwin
                      artifact_name: submod
                      asset_name: submod-macos-aarch64

        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: recursive

            - name: Install Rust
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.target }}

            - name: Install musl-tools (Linux musl)
              if: matrix.target == 'x86_64-unknown-linux-musl'
              run: sudo apt-get update && sudo apt-get install -y musl-tools

            - name: Setup OpenSSL for macOS
              if: matrix.os == 'macos-latest'
              run: |
                  brew install openssl pkg-config
                  # For cross-compilation, we need to set up the environment properly
                  if [[ "${{ matrix.target }}" == "x86_64-apple-darwin" ]]; then
                      echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
                      echo "OPENSSL_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV
                  fi

            - name: Cache cargo registry
              uses: actions/cache@v4
              with:
                  path: ~/.cargo/registry
                  key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

            - name: Cache cargo index
              uses: actions/cache@v4
              with:
                  path: ~/.cargo/git
                  key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

            - name: Cache cargo build
              uses: actions/cache@v4
              with:
                  path: target
                  key: ${{ runner.os }}-cargo-build-target-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

            - name: Build
              run: |
                  # For macOS x86_64 cross-compilation, build without git2 to avoid OpenSSL issues
                  if [[ "${{ matrix.target }}" == "x86_64-apple-darwin" && "${{ runner.arch }}" == "ARM64" ]]; then
                      cargo build --release --target ${{ matrix.target }} --no-default-features
                  else
                      cargo build --release --target ${{ matrix.target }}
                  fi

            - name: Upload artifact
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.asset_name }}
                  path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    publish:
        name: Publish to crates.io
        needs: [test, build]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: recursive

            - name: Install Rust
              uses: dtolnay/rust-toolchain@stable

            - name: Cache cargo registry
              uses: actions/cache@v4
              with:
                  path: ~/.cargo/registry
                  key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

            - name: Cache cargo index
              uses: actions/cache@v4
              with:
                  path: ~/.cargo/git
                  key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

            - name: Publish to crates.io
              run: cargo publish --token ${{ secrets.CRATESIO_KEY }}

    github_release:
        name: Create GitHub Release
        needs: [test, build, publish]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Download all artifacts
              uses: actions/download-artifact@v4

            - name: Create Release
              uses: softprops/action-gh-release@v2
              with:
                  files: |
                      submod-linux-x86_64/submod
                      submod-linux-x86_64-musl/submod
                      submod-windows-x86_64.exe/submod.exe
                      submod-macos-x86_64/submod
                      submod-macos-aarch64/submod
                  generate_release_notes: true
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
