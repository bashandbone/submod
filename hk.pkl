/*
 * SPDX-FileCopyrightText: 2025 Adam Poulemanos <89049923+bashandbone@users.noreply.github.com>
 *
 * * Licensed under the [Plain MIT License](LICENSE.md)
*/

amends "package://github.com/jdx/hk/releases/download/v1.2.0/hk@1.2.0#/Config.pkl"
import "package://github.com/jdx/hk/releases/download/v1.2.0/hk@1.2.0#/Builtins.pkl"

local linters = new Mapping<String, Step> {

    ["cargo_deny"] = new Step {
        workspace_indicator = "Cargo.toml"
        glob = "Cargo.lock"
        check = "cargo deny --all-features --manifest-path {{ workspace_indicator }} -f json -L warn check --audit-compatible-output --exclude-dev --hide-inclusion-graph | jq -e '.[].vulnerabilities | length == 0' || exit 1"
    }
    ["cargo_fmt"] = Builtins.cargo_fmt
    ["cargo_clippy"] = Builtins.cargo_clippy
    ["cargo_check"] = Builtins.cargo_check
    ["cargo_test"] = new Step {
        workspace_indicator = "Cargo.toml"
        glob = "src/**/*.rs"
        check = "cargo nextest --manifest-path {{ workspace_indicator }} run --all-features --no-fail-fast -j 1"
        env = new Mapping<String, String> {
            ["RUST_BACKTRACE"] = "1"
        }
    }

    // Spellchecker
    ["typos"] = new Step {
        workspace_indicator = "_typos.toml"
        glob = List( "*README", "*.{.login,astro,bash,bash_logout,bashrc,browserlistrc,conf,config,csh,css,cts,fish,gitattributes,gitmodules,html,htmx,ini,j2,jinja,jinja2,json,json5,jsonc,jsonl,ksh,md,mdown,mdtext,mdtxt,mdwn,mdx,mk,mkd,mts,nix,nu,pkl,profile,quokka,sass,scss,sh,sh,shellcheckrc,sql,sqlite,stylelintrc,svelte,tcsh,toml,ts,tsx,txt,yaml,yml,zlogin,zlogout,zprofile,zsh,zshenv,zshrc}", "*Dockerfile*", "*Makefile*", "*makefile*", "CHANGELOG*", "CODE_OF_CONDUCT*", "CONTRIBUTING*", "HACKING*", "LICENSE", "README*", "SECURITY*", "UNLICENSE")
        check = "typos -j 8 --config {{ workspace_indicator }} {{ files }}"
        fix = "typos --write-changes --config {{ workspace_indicator }} {{ files }}"
    }

    ["prettier"] = (Builtins.prettier) {
        glob = Builtins.prettier.glob.add("*.yml").add(".roomodes")
        stage = this.glob
    }


    // define a custom linter
    ["pkl"] = new Step {
        glob = "*.pkl"
        check = "pkl eval {{files}} >/dev/null"
    }
}


local ci = (linters) {
    ["cargo_test"] {
        check = "cargo nextest --manifest-path {{ workspace_indicator }} run --all-features --fail-fast -j 1"
    }
}

hooks {
    ["pre-commit"] {
        fix = true    // automatically modify files with available linter fixes
        stash = "git" // stashes unstaged changes while running fix steps
        steps = linters
    }
    // instead of pre-commit, you can instead define pre-push hooks
    ["pre-push"] {
        steps = linters
    }
    ["fix"] {
        fix = true
        stash = "git" // stashes unstaged changes while running fix steps
        steps = linters
    }
    ["check"] {
        steps = linters
    }
    ["test"] {
        steps =  linters
                    .toMap()
                    .filter(
                        (name, _) -> name == "cargo_test")
                    .toMapping()

    }

    ["ci"] {
        steps = ci
    }

}
